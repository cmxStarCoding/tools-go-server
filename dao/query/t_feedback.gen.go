// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"journey/dao/model"
)

func newTFeedback(db *gorm.DB, opts ...gen.DOOption) tFeedback {
	_tFeedback := tFeedback{}

	_tFeedback.tFeedbackDo.UseDB(db, opts...)
	_tFeedback.tFeedbackDo.UseModel(&model.TFeedback{})

	tableName := _tFeedback.tFeedbackDo.TableName()
	_tFeedback.ALL = field.NewAsterisk(tableName)
	_tFeedback.ID = field.NewInt32(tableName, "id")
	_tFeedback.UserID = field.NewInt32(tableName, "user_id")
	_tFeedback.ContractPhone = field.NewString(tableName, "contract_phone")
	_tFeedback.Content = field.NewString(tableName, "content")
	_tFeedback.CreatedAt = field.NewTime(tableName, "created_at")
	_tFeedback.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tFeedback.DeletedAt = field.NewField(tableName, "deleted_at")

	_tFeedback.fillFieldMap()

	return _tFeedback
}

type tFeedback struct {
	tFeedbackDo tFeedbackDo

	ALL           field.Asterisk
	ID            field.Int32  // 主键id
	UserID        field.Int32  // 用户id
	ContractPhone field.String // 手机号码
	Content       field.String // 反馈的内容
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t tFeedback) Table(newTableName string) *tFeedback {
	t.tFeedbackDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tFeedback) As(alias string) *tFeedback {
	t.tFeedbackDo.DO = *(t.tFeedbackDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tFeedback) updateTableName(table string) *tFeedback {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UserID = field.NewInt32(table, "user_id")
	t.ContractPhone = field.NewString(table, "contract_phone")
	t.Content = field.NewString(table, "content")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tFeedback) WithContext(ctx context.Context) *tFeedbackDo {
	return t.tFeedbackDo.WithContext(ctx)
}

func (t tFeedback) TableName() string { return t.tFeedbackDo.TableName() }

func (t tFeedback) Alias() string { return t.tFeedbackDo.Alias() }

func (t tFeedback) Columns(cols ...field.Expr) gen.Columns { return t.tFeedbackDo.Columns(cols...) }

func (t *tFeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tFeedback) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["contract_phone"] = t.ContractPhone
	t.fieldMap["content"] = t.Content
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tFeedback) clone(db *gorm.DB) tFeedback {
	t.tFeedbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tFeedback) replaceDB(db *gorm.DB) tFeedback {
	t.tFeedbackDo.ReplaceDB(db)
	return t
}

type tFeedbackDo struct{ gen.DO }

func (t tFeedbackDo) Debug() *tFeedbackDo {
	return t.withDO(t.DO.Debug())
}

func (t tFeedbackDo) WithContext(ctx context.Context) *tFeedbackDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tFeedbackDo) ReadDB() *tFeedbackDo {
	return t.Clauses(dbresolver.Read)
}

func (t tFeedbackDo) WriteDB() *tFeedbackDo {
	return t.Clauses(dbresolver.Write)
}

func (t tFeedbackDo) Session(config *gorm.Session) *tFeedbackDo {
	return t.withDO(t.DO.Session(config))
}

func (t tFeedbackDo) Clauses(conds ...clause.Expression) *tFeedbackDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tFeedbackDo) Returning(value interface{}, columns ...string) *tFeedbackDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tFeedbackDo) Not(conds ...gen.Condition) *tFeedbackDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tFeedbackDo) Or(conds ...gen.Condition) *tFeedbackDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tFeedbackDo) Select(conds ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tFeedbackDo) Where(conds ...gen.Condition) *tFeedbackDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tFeedbackDo) Order(conds ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tFeedbackDo) Distinct(cols ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tFeedbackDo) Omit(cols ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tFeedbackDo) Join(table schema.Tabler, on ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tFeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tFeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tFeedbackDo) Group(cols ...field.Expr) *tFeedbackDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tFeedbackDo) Having(conds ...gen.Condition) *tFeedbackDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tFeedbackDo) Limit(limit int) *tFeedbackDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tFeedbackDo) Offset(offset int) *tFeedbackDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tFeedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tFeedbackDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tFeedbackDo) Unscoped() *tFeedbackDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tFeedbackDo) Create(values ...*model.TFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tFeedbackDo) CreateInBatches(values []*model.TFeedback, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tFeedbackDo) Save(values ...*model.TFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tFeedbackDo) First() (*model.TFeedback, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFeedback), nil
	}
}

func (t tFeedbackDo) Take() (*model.TFeedback, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFeedback), nil
	}
}

func (t tFeedbackDo) Last() (*model.TFeedback, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFeedback), nil
	}
}

func (t tFeedbackDo) Find() ([]*model.TFeedback, error) {
	result, err := t.DO.Find()
	return result.([]*model.TFeedback), err
}

func (t tFeedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TFeedback, err error) {
	buf := make([]*model.TFeedback, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tFeedbackDo) FindInBatches(result *[]*model.TFeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tFeedbackDo) Attrs(attrs ...field.AssignExpr) *tFeedbackDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tFeedbackDo) Assign(attrs ...field.AssignExpr) *tFeedbackDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tFeedbackDo) Joins(fields ...field.RelationField) *tFeedbackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tFeedbackDo) Preload(fields ...field.RelationField) *tFeedbackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tFeedbackDo) FirstOrInit() (*model.TFeedback, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFeedback), nil
	}
}

func (t tFeedbackDo) FirstOrCreate() (*model.TFeedback, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TFeedback), nil
	}
}

func (t tFeedbackDo) FindByPage(offset int, limit int) (result []*model.TFeedback, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tFeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tFeedbackDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tFeedbackDo) Delete(models ...*model.TFeedback) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tFeedbackDo) withDO(do gen.Dao) *tFeedbackDo {
	t.DO = *do.(*gen.DO)
	return t
}
