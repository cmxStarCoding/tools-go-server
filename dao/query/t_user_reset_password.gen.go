// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"journey/dao/model"
)

func newTUserResetPassword(db *gorm.DB, opts ...gen.DOOption) tUserResetPassword {
	_tUserResetPassword := tUserResetPassword{}

	_tUserResetPassword.tUserResetPasswordDo.UseDB(db, opts...)
	_tUserResetPassword.tUserResetPasswordDo.UseModel(&model.TUserResetPassword{})

	tableName := _tUserResetPassword.tUserResetPasswordDo.TableName()
	_tUserResetPassword.ALL = field.NewAsterisk(tableName)
	_tUserResetPassword.ID = field.NewInt32(tableName, "id")
	_tUserResetPassword.Account = field.NewString(tableName, "account")
	_tUserResetPassword.UseEmail = field.NewString(tableName, "use_email")
	_tUserResetPassword.Code = field.NewString(tableName, "code")
	_tUserResetPassword.CreatedAt = field.NewTime(tableName, "created_at")
	_tUserResetPassword.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUserResetPassword.DeletedAt = field.NewField(tableName, "deleted_at")

	_tUserResetPassword.fillFieldMap()

	return _tUserResetPassword
}

type tUserResetPassword struct {
	tUserResetPasswordDo tUserResetPasswordDo

	ALL       field.Asterisk
	ID        field.Int32  // 主键id
	Account   field.String // 找回账号
	UseEmail  field.String // 使用的邮箱
	Code      field.String // 验证码
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t tUserResetPassword) Table(newTableName string) *tUserResetPassword {
	t.tUserResetPasswordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUserResetPassword) As(alias string) *tUserResetPassword {
	t.tUserResetPasswordDo.DO = *(t.tUserResetPasswordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUserResetPassword) updateTableName(table string) *tUserResetPassword {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Account = field.NewString(table, "account")
	t.UseEmail = field.NewString(table, "use_email")
	t.Code = field.NewString(table, "code")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tUserResetPassword) WithContext(ctx context.Context) *tUserResetPasswordDo {
	return t.tUserResetPasswordDo.WithContext(ctx)
}

func (t tUserResetPassword) TableName() string { return t.tUserResetPasswordDo.TableName() }

func (t tUserResetPassword) Alias() string { return t.tUserResetPasswordDo.Alias() }

func (t tUserResetPassword) Columns(cols ...field.Expr) gen.Columns {
	return t.tUserResetPasswordDo.Columns(cols...)
}

func (t *tUserResetPassword) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUserResetPassword) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["account"] = t.Account
	t.fieldMap["use_email"] = t.UseEmail
	t.fieldMap["code"] = t.Code
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tUserResetPassword) clone(db *gorm.DB) tUserResetPassword {
	t.tUserResetPasswordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tUserResetPassword) replaceDB(db *gorm.DB) tUserResetPassword {
	t.tUserResetPasswordDo.ReplaceDB(db)
	return t
}

type tUserResetPasswordDo struct{ gen.DO }

func (t tUserResetPasswordDo) Debug() *tUserResetPasswordDo {
	return t.withDO(t.DO.Debug())
}

func (t tUserResetPasswordDo) WithContext(ctx context.Context) *tUserResetPasswordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUserResetPasswordDo) ReadDB() *tUserResetPasswordDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUserResetPasswordDo) WriteDB() *tUserResetPasswordDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUserResetPasswordDo) Session(config *gorm.Session) *tUserResetPasswordDo {
	return t.withDO(t.DO.Session(config))
}

func (t tUserResetPasswordDo) Clauses(conds ...clause.Expression) *tUserResetPasswordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUserResetPasswordDo) Returning(value interface{}, columns ...string) *tUserResetPasswordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUserResetPasswordDo) Not(conds ...gen.Condition) *tUserResetPasswordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUserResetPasswordDo) Or(conds ...gen.Condition) *tUserResetPasswordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUserResetPasswordDo) Select(conds ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUserResetPasswordDo) Where(conds ...gen.Condition) *tUserResetPasswordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUserResetPasswordDo) Order(conds ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUserResetPasswordDo) Distinct(cols ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUserResetPasswordDo) Omit(cols ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUserResetPasswordDo) Join(table schema.Tabler, on ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUserResetPasswordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUserResetPasswordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUserResetPasswordDo) Group(cols ...field.Expr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUserResetPasswordDo) Having(conds ...gen.Condition) *tUserResetPasswordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUserResetPasswordDo) Limit(limit int) *tUserResetPasswordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUserResetPasswordDo) Offset(offset int) *tUserResetPasswordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUserResetPasswordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUserResetPasswordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUserResetPasswordDo) Unscoped() *tUserResetPasswordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUserResetPasswordDo) Create(values ...*model.TUserResetPassword) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUserResetPasswordDo) CreateInBatches(values []*model.TUserResetPassword, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUserResetPasswordDo) Save(values ...*model.TUserResetPassword) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUserResetPasswordDo) First() (*model.TUserResetPassword, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserResetPassword), nil
	}
}

func (t tUserResetPasswordDo) Take() (*model.TUserResetPassword, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserResetPassword), nil
	}
}

func (t tUserResetPasswordDo) Last() (*model.TUserResetPassword, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserResetPassword), nil
	}
}

func (t tUserResetPasswordDo) Find() ([]*model.TUserResetPassword, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUserResetPassword), err
}

func (t tUserResetPasswordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUserResetPassword, err error) {
	buf := make([]*model.TUserResetPassword, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUserResetPasswordDo) FindInBatches(result *[]*model.TUserResetPassword, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUserResetPasswordDo) Attrs(attrs ...field.AssignExpr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUserResetPasswordDo) Assign(attrs ...field.AssignExpr) *tUserResetPasswordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUserResetPasswordDo) Joins(fields ...field.RelationField) *tUserResetPasswordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUserResetPasswordDo) Preload(fields ...field.RelationField) *tUserResetPasswordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUserResetPasswordDo) FirstOrInit() (*model.TUserResetPassword, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserResetPassword), nil
	}
}

func (t tUserResetPasswordDo) FirstOrCreate() (*model.TUserResetPassword, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUserResetPassword), nil
	}
}

func (t tUserResetPasswordDo) FindByPage(offset int, limit int) (result []*model.TUserResetPassword, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUserResetPasswordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUserResetPasswordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUserResetPasswordDo) Delete(models ...*model.TUserResetPassword) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUserResetPasswordDo) withDO(do gen.Dao) *tUserResetPasswordDo {
	t.DO = *do.(*gen.DO)
	return t
}
