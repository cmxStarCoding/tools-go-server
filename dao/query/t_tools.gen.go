// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"journey/dao/model"
)

func newTTool(db *gorm.DB, opts ...gen.DOOption) tTool {
	_tTool := tTool{}

	_tTool.tToolDo.UseDB(db, opts...)
	_tTool.tToolDo.UseModel(&model.TTool{})

	tableName := _tTool.tToolDo.TableName()
	_tTool.ALL = field.NewAsterisk(tableName)
	_tTool.ID = field.NewInt32(tableName, "id")
	_tTool.Mark = field.NewString(tableName, "mark")
	_tTool.Name = field.NewString(tableName, "name")
	_tTool.Logo = field.NewString(tableName, "logo")
	_tTool.Description = field.NewString(tableName, "description")
	_tTool.CategoryID = field.NewInt32(tableName, "category_id")
	_tTool.IsRecommend = field.NewInt32(tableName, "is_recommend")
	_tTool.Router = field.NewString(tableName, "router")
	_tTool.CreatedAt = field.NewTime(tableName, "created_at")
	_tTool.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tTool.DeletedAt = field.NewField(tableName, "deleted_at")

	_tTool.fillFieldMap()

	return _tTool
}

type tTool struct {
	tToolDo tToolDo

	ALL         field.Asterisk
	ID          field.Int32  // 主键id
	Mark        field.String // 工具标识
	Name        field.String // 名称
	Logo        field.String // 工具图片
	Description field.String // 描述
	CategoryID  field.Int32  // 分类id
	IsRecommend field.Int32  // 是否推荐1是2否
	Router      field.String // 路由跳转
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (t tTool) Table(newTableName string) *tTool {
	t.tToolDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTool) As(alias string) *tTool {
	t.tToolDo.DO = *(t.tToolDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTool) updateTableName(table string) *tTool {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Mark = field.NewString(table, "mark")
	t.Name = field.NewString(table, "name")
	t.Logo = field.NewString(table, "logo")
	t.Description = field.NewString(table, "description")
	t.CategoryID = field.NewInt32(table, "category_id")
	t.IsRecommend = field.NewInt32(table, "is_recommend")
	t.Router = field.NewString(table, "router")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tTool) WithContext(ctx context.Context) *tToolDo { return t.tToolDo.WithContext(ctx) }

func (t tTool) TableName() string { return t.tToolDo.TableName() }

func (t tTool) Alias() string { return t.tToolDo.Alias() }

func (t tTool) Columns(cols ...field.Expr) gen.Columns { return t.tToolDo.Columns(cols...) }

func (t *tTool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTool) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["mark"] = t.Mark
	t.fieldMap["name"] = t.Name
	t.fieldMap["logo"] = t.Logo
	t.fieldMap["description"] = t.Description
	t.fieldMap["category_id"] = t.CategoryID
	t.fieldMap["is_recommend"] = t.IsRecommend
	t.fieldMap["router"] = t.Router
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tTool) clone(db *gorm.DB) tTool {
	t.tToolDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTool) replaceDB(db *gorm.DB) tTool {
	t.tToolDo.ReplaceDB(db)
	return t
}

type tToolDo struct{ gen.DO }

func (t tToolDo) Debug() *tToolDo {
	return t.withDO(t.DO.Debug())
}

func (t tToolDo) WithContext(ctx context.Context) *tToolDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tToolDo) ReadDB() *tToolDo {
	return t.Clauses(dbresolver.Read)
}

func (t tToolDo) WriteDB() *tToolDo {
	return t.Clauses(dbresolver.Write)
}

func (t tToolDo) Session(config *gorm.Session) *tToolDo {
	return t.withDO(t.DO.Session(config))
}

func (t tToolDo) Clauses(conds ...clause.Expression) *tToolDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tToolDo) Returning(value interface{}, columns ...string) *tToolDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tToolDo) Not(conds ...gen.Condition) *tToolDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tToolDo) Or(conds ...gen.Condition) *tToolDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tToolDo) Select(conds ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tToolDo) Where(conds ...gen.Condition) *tToolDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tToolDo) Order(conds ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tToolDo) Distinct(cols ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tToolDo) Omit(cols ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tToolDo) Join(table schema.Tabler, on ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tToolDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tToolDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tToolDo) RightJoin(table schema.Tabler, on ...field.Expr) *tToolDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tToolDo) Group(cols ...field.Expr) *tToolDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tToolDo) Having(conds ...gen.Condition) *tToolDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tToolDo) Limit(limit int) *tToolDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tToolDo) Offset(offset int) *tToolDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tToolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tToolDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tToolDo) Unscoped() *tToolDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tToolDo) Create(values ...*model.TTool) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tToolDo) CreateInBatches(values []*model.TTool, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tToolDo) Save(values ...*model.TTool) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tToolDo) First() (*model.TTool, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTool), nil
	}
}

func (t tToolDo) Take() (*model.TTool, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTool), nil
	}
}

func (t tToolDo) Last() (*model.TTool, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTool), nil
	}
}

func (t tToolDo) Find() ([]*model.TTool, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTool), err
}

func (t tToolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTool, err error) {
	buf := make([]*model.TTool, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tToolDo) FindInBatches(result *[]*model.TTool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tToolDo) Attrs(attrs ...field.AssignExpr) *tToolDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tToolDo) Assign(attrs ...field.AssignExpr) *tToolDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tToolDo) Joins(fields ...field.RelationField) *tToolDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tToolDo) Preload(fields ...field.RelationField) *tToolDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tToolDo) FirstOrInit() (*model.TTool, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTool), nil
	}
}

func (t tToolDo) FirstOrCreate() (*model.TTool, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTool), nil
	}
}

func (t tToolDo) FindByPage(offset int, limit int) (result []*model.TTool, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tToolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tToolDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tToolDo) Delete(models ...*model.TTool) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tToolDo) withDO(do gen.Dao) *tToolDo {
	t.DO = *do.(*gen.DO)
	return t
}
