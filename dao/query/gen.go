// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		TCategory:          newTCategory(db, opts...),
		TExportTask:        newTExportTask(db, opts...),
		TFeedback:          newTFeedback(db, opts...),
		TSystemUpdateLog:   newTSystemUpdateLog(db, opts...),
		TTool:              newTTool(db, opts...),
		TUser:              newTUser(db, opts...),
		TUserResetPassword: newTUserResetPassword(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TCategory          tCategory
	TExportTask        tExportTask
	TFeedback          tFeedback
	TSystemUpdateLog   tSystemUpdateLog
	TTool              tTool
	TUser              tUser
	TUserResetPassword tUserResetPassword
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		TCategory:          q.TCategory.clone(db),
		TExportTask:        q.TExportTask.clone(db),
		TFeedback:          q.TFeedback.clone(db),
		TSystemUpdateLog:   q.TSystemUpdateLog.clone(db),
		TTool:              q.TTool.clone(db),
		TUser:              q.TUser.clone(db),
		TUserResetPassword: q.TUserResetPassword.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		TCategory:          q.TCategory.replaceDB(db),
		TExportTask:        q.TExportTask.replaceDB(db),
		TFeedback:          q.TFeedback.replaceDB(db),
		TSystemUpdateLog:   q.TSystemUpdateLog.replaceDB(db),
		TTool:              q.TTool.replaceDB(db),
		TUser:              q.TUser.replaceDB(db),
		TUserResetPassword: q.TUserResetPassword.replaceDB(db),
	}
}

type queryCtx struct {
	TCategory          *tCategoryDo
	TExportTask        *tExportTaskDo
	TFeedback          *tFeedbackDo
	TSystemUpdateLog   *tSystemUpdateLogDo
	TTool              *tToolDo
	TUser              *tUserDo
	TUserResetPassword *tUserResetPasswordDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TCategory:          q.TCategory.WithContext(ctx),
		TExportTask:        q.TExportTask.WithContext(ctx),
		TFeedback:          q.TFeedback.WithContext(ctx),
		TSystemUpdateLog:   q.TSystemUpdateLog.WithContext(ctx),
		TTool:              q.TTool.WithContext(ctx),
		TUser:              q.TUser.WithContext(ctx),
		TUserResetPassword: q.TUserResetPassword.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
